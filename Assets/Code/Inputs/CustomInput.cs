//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Code/Inputs/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c1b57382-3e34-4f90-ac8b-666381d3f8e6"",
            ""actions"": [
                {
                    ""name"": ""DiscoUp"",
                    ""type"": ""Button"",
                    ""id"": ""d5eb3d43-bd79-453a-9a10-01d4d3a0e796"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DiscoDown"",
                    ""type"": ""Button"",
                    ""id"": ""76552227-16c8-4ad1-bc1e-af531a042452"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DiscoLeft"",
                    ""type"": ""Button"",
                    ""id"": ""6093d89f-d684-4f5f-af1d-e098859f5809"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DiscoRight"",
                    ""type"": ""Button"",
                    ""id"": ""d8cc2ca5-f826-4690-9508-2e9df27a1620"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38019275-a7c6-41d6-b7f2-1abd66af5466"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiscoUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f5e961d-5425-47dd-807a-bc5b6c2a2fc9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiscoUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dae0125-4ee3-4c4d-a8ef-b266d72c8a4f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiscoDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f671529-18ee-4c46-8060-ec651f255702"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiscoDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1e0f73c-0245-4fde-8c59-14928f6c804b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiscoLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6dbeef6-03b1-42ad-9d6a-6a2faa0990aa"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiscoLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""547b03ea-c818-4008-879b-b5eba8b0a457"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiscoRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c780397-1ab2-4491-92fc-54083f408313"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiscoRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Primary"",
            ""bindingGroup"": ""Primary"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_DiscoUp = m_Player.FindAction("DiscoUp", throwIfNotFound: true);
        m_Player_DiscoDown = m_Player.FindAction("DiscoDown", throwIfNotFound: true);
        m_Player_DiscoLeft = m_Player.FindAction("DiscoLeft", throwIfNotFound: true);
        m_Player_DiscoRight = m_Player.FindAction("DiscoRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_DiscoUp;
    private readonly InputAction m_Player_DiscoDown;
    private readonly InputAction m_Player_DiscoLeft;
    private readonly InputAction m_Player_DiscoRight;
    public struct PlayerActions
    {
        private @CustomInput m_Wrapper;
        public PlayerActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @DiscoUp => m_Wrapper.m_Player_DiscoUp;
        public InputAction @DiscoDown => m_Wrapper.m_Player_DiscoDown;
        public InputAction @DiscoLeft => m_Wrapper.m_Player_DiscoLeft;
        public InputAction @DiscoRight => m_Wrapper.m_Player_DiscoRight;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @DiscoUp.started += instance.OnDiscoUp;
            @DiscoUp.performed += instance.OnDiscoUp;
            @DiscoUp.canceled += instance.OnDiscoUp;
            @DiscoDown.started += instance.OnDiscoDown;
            @DiscoDown.performed += instance.OnDiscoDown;
            @DiscoDown.canceled += instance.OnDiscoDown;
            @DiscoLeft.started += instance.OnDiscoLeft;
            @DiscoLeft.performed += instance.OnDiscoLeft;
            @DiscoLeft.canceled += instance.OnDiscoLeft;
            @DiscoRight.started += instance.OnDiscoRight;
            @DiscoRight.performed += instance.OnDiscoRight;
            @DiscoRight.canceled += instance.OnDiscoRight;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @DiscoUp.started -= instance.OnDiscoUp;
            @DiscoUp.performed -= instance.OnDiscoUp;
            @DiscoUp.canceled -= instance.OnDiscoUp;
            @DiscoDown.started -= instance.OnDiscoDown;
            @DiscoDown.performed -= instance.OnDiscoDown;
            @DiscoDown.canceled -= instance.OnDiscoDown;
            @DiscoLeft.started -= instance.OnDiscoLeft;
            @DiscoLeft.performed -= instance.OnDiscoLeft;
            @DiscoLeft.canceled -= instance.OnDiscoLeft;
            @DiscoRight.started -= instance.OnDiscoRight;
            @DiscoRight.performed -= instance.OnDiscoRight;
            @DiscoRight.canceled -= instance.OnDiscoRight;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_PrimarySchemeIndex = -1;
    public InputControlScheme PrimaryScheme
    {
        get
        {
            if (m_PrimarySchemeIndex == -1) m_PrimarySchemeIndex = asset.FindControlSchemeIndex("Primary");
            return asset.controlSchemes[m_PrimarySchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnDiscoUp(InputAction.CallbackContext context);
        void OnDiscoDown(InputAction.CallbackContext context);
        void OnDiscoLeft(InputAction.CallbackContext context);
        void OnDiscoRight(InputAction.CallbackContext context);
    }
}
